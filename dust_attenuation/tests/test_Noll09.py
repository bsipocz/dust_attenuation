import numpy as np
import pytest

import astropy.units as u
from astropy.modeling import InputParameterError

from ..shapes import Noll09
from .helpers import _invalid_x_range


@pytest.mark.parametrize("x0_invalid", [-1.0, -0.00001, -10])
def test_invalid_x0_input(x0_invalid):
    with pytest.raises(InputParameterError) as exc:
        tmodel = Noll09(x0=x0_invalid)
    assert exc.value.args[0] == 'parameter x0 must be positive'

@pytest.mark.parametrize("gamma_invalid", [-1.0, -0.00001, -10])
def test_invalid_gamma_input(gamma_invalid):
    with pytest.raises(InputParameterError) as exc:
        tmodel = Noll09(gamma=gamma_invalid)
    assert exc.value.args[0] == 'parameter gamma must be positive'

@pytest.mark.parametrize("ampl_invalid", [-1.0, -0.00001, -10])
def test_invalid_ampl_input(ampl_invalid):
    with pytest.raises(InputParameterError) as exc:
        tmodel = Noll09(ampl=ampl_invalid)
    assert exc.value.args[0] == 'parameter ampl must be positive'

@pytest.mark.parametrize("slope_invalid", [-4.0, -3.00001, 10])
def test_invalid_slope_input(slope_invalid):
    with pytest.raises(InputParameterError) as exc:
        tmodel = Noll09(slope=slope_invalid)
    assert exc.value.args[0] == 'parameter slope must be between -3.0 and 3.0'

@pytest.mark.parametrize("Av_invalid", [-1.0, -0.00001, -10])
def test_invalid_Av_input(Av_invalid):
    with pytest.raises(InputParameterError) as exc:
        tmodel = Noll09(Av=Av_invalid)
    assert exc.value.args[0] == 'parameter Av must be positive'

@pytest.mark.parametrize("x_invalid", [-1.0, 0.09, 11, 100.])
def test_invalid_wavenumbers(x_invalid):
    _invalid_x_range(x_invalid, Noll09(), 'Noll09')


@pytest.mark.parametrize("x_invalid_wavenumber",
                         [-1.0, 0.09, 11, 100.]/u.micron)
def test_invalid_wavenumbers_imicron(x_invalid_wavenumber):
    _invalid_x_range(x_invalid_wavenumber, Noll09(), 'Noll09')


@pytest.mark.parametrize("x_invalid_micron",
                         u.micron/[-1.0, 0.09, 11, 100.])
def test_invalid_micron(x_invalid_micron):
    _invalid_x_range(x_invalid_micron, Noll09(), 'Noll09')


@pytest.mark.parametrize("x_invalid_angstrom",
                         u.angstrom*1e4/[-1.0, 0.09, 11, 100.])
def test_invalid_angstrom(x_invalid_angstrom):
    _invalid_x_range(x_invalid_angstrom, Noll09(), 'Noll09')


def get_axav_cor_vals(x0, gamma, ampl, slope, Av):
    # testing wavenumbers. Validity range 0.097 - 2.2 microns
    # correct values generated using this code
    x = np.array([0.097, 0.1021387, 0.10785232, 0.11424305, 0.12143884,
                  0.12960205, 0.13894181, 0.14973226, 0.16233985, 0.17726577,
                  0.19521425, 0.21720684, 0.24478387, 0.28038172, 0.32809516,
                  0.39537786, 0.49737488, 0.67029261, 1.02752154, 2.2 ])

    # add units
    x = x*u.micron
    if x0 == 0.2175: 
       if gamma == 0.035:
          if ampl == 0.0:
             if slope == -1.0:
                if Av == 0.2:
                   cor_vals = np.array([0., 0.0476727, 0.13119835, 0.2454022,
                                        0.38269147, 0.53675915, 0.70305229,
                                        0.87839772, 1.06100214, 1.25045205,
                                        1.44771379, 1.65513354, 1.87246302,
                                        2.11132361, 2.36899125, 2.64703323,
                                        2.94714046, 3.27112745, 3.62093228,
                                        3.99861665])
                elif Av == 1.0:
                   cor_vals = np.array([0., 0.23836349, 0.65599175, 1.22701102,
                                        1.91345735, 2.68379577, 3.51526143,
                                        4.3919886, 5.30501068, 6.25226024,
                                        7.23856897, 8.2756677, 9.36231512,
                                        10.55661806, 11.84495623, 13.23516615,
                                        14.73570232, 16.35563723, 18.10466138,
                                        19.99308327])
                elif Av == 10.0:
                   cor_vals = np.array([0., 2.38363494, 6.5599175, 12.27011018,
                                        19.13457348, 26.83795774, 35.15261433,
                                        43.91988597, 53.05010681, 62.5226024,
                                        72.38568968, 82.756677, 93.62315116,
                                        105.56618057, 118.44956232, 132.3516615,
                                        147.35702315, 163.55637227, 181.04661381,
                                        199.93083267])
             elif slope == 0.0:
                if Av == 0.2:
                   cor_vals = np.array([0., 0.08906314, 0.15989324, 0.22192162,
                                        0.27510497, 0.32019651, 0.35840547,
                                        0.39094108, 0.41901258, 0.4438292,
                                        0.46660019, 0.48853477, 0.50976024,
                                        0.53336569, 0.55822929, 0.58445936,
                                        0.6121642, 0.64145213, 0.67243149,
                                        0.70521057])
                elif Av == 1.0:
                   cor_vals = np.array([0., 0.44531568, 0.79946622, 1.1096081,
                                        1.37552487, 1.60098256, 1.79202733,
                                        1.95470538, 2.09506288, 2.219146,
                                        2.33300094, 2.44267386, 2.54880118,
                                        2.66682847, 2.79114647, 2.92229678,
                                        3.06082098, 3.20726067, 3.36215744,
                                        3.52605287])
                elif Av == 10.0:
                   cor_vals = np.array([0., 4.45315682, 7.99466223, 11.09608099,
                                        13.75524872, 16.00982558, 17.92027334,
                                        19.54705381, 20.95062878, 22.19146003,
                                        23.33000937, 24.42673858, 25.48801176,
                                        26.66828467, 27.91146471, 29.22296779,
                                        30.60820982, 32.0726067, 33.62157435,
                                        35.26052867])
             elif slope == 1.0:
                if Av == 0.2:
                   cor_vals = np.array([0., 0.16638962, 0.19486411, 0.20068771,
                                        0.1977644, 0.19100896, 0.18270971,
                                        0.17399285, 0.16547708, 0.15753052,
                                        0.1503859, 0.14419756, 0.13877737,
                                        0.13473963, 0.1315412, 0.12904739,
                                        0.12715546, 0.12578563, 0.12487505,
                                        0.1243735])
                elif Av == 1.0:
                   cor_vals = np.array([0., 0.8319481, 0.97432055, 1.00343853,
                                        0.98882198, 0.95504478, 0.91354854,
                                        0.86996426, 0.82738541, 0.78765259,
                                        0.75192948, 0.72098782, 0.69388686,
                                        0.67369815, 0.65770599, 0.64523697,
                                        0.6357773, 0.62892817, 0.62437526,
                                        0.62186751])
                elif Av == 10.0:
                   cor_vals = np.array([0., 8.31948101, 9.74320548, 10.03438531,
                                        9.88821976, 9.55044782, 9.13548545,
                                        8.69964264, 8.27385415, 7.87652592,
                                        7.51929476, 7.20987816, 6.93886859,
                                        6.73698151, 6.57705986, 6.45236967,
                                        6.35777304, 6.28928171, 6.24375258,
                                        6.21867506])
          elif ampl == 5.0:
             if slope == -1.0:
                if Av == 0.2:
                   cor_vals = np.array([6.37169507e-05, 4.79862903e-02,
                                        1.32036480e-01, 2.47257381e-01,
                                        3.86606834e-01, 5.45389266e-01,
                                        7.25141383e-01, 9.56353773e-01,
                                        1.30784635e+00, 1.33825445e+00,
                                        1.48040170e+00, 1.67204809e+00,
                                        1.88294735e+00, 2.11855267e+00,
                                        2.37433120e+00, 2.65117055e+00,
                                        2.95045957e+00, 3.27386144e+00,
                                        3.62323139e+00, 4.00058245e+00])
                elif Av == 1.0:
                   cor_vals = np.array([3.18584754e-04, 2.39931451e-01,
                                        6.60182402e-01, 1.23628691e+00,
                                        1.93303417e+00, 2.72694633e+00,
                                        3.62570691e+00, 4.78176886e+00,
                                        6.53923175e+00, 6.69127227e+00,
                                        7.40200848e+00, 8.36024044e+00,
                                        9.41473674e+00, 1.05927634e+01,
                                        1.18716560e+01, 1.32558528e+01,
                                        1.47522978e+01, 1.63693072e+01,
                                        1.81161569e+01, 2.00029122e+01])
                elif Av == 10.0:
                   cor_vals = np.array([3.18584754e-03, 2.39931451e+00,
                                        6.60182402e+00, 1.23628691e+01,
                                        1.93303417e+01, 2.72694633e+01,
                                        3.62570691e+01, 4.78176886e+01,
                                        6.53923175e+01, 6.69127227e+01,
                                        7.40200848e+01, 8.36024044e+01,
                                        9.41473674e+01, 1.05927634e+02,
                                        1.18716560e+02, 1.32558528e+02,
                                        1.47522978e+02, 1.63693072e+02,
                                        1.81161569e+02, 2.00029122e+02])
             elif slope == 0.0:
                if Av == 0.2:
                   cor_vals = np.array([6.37169507e-05, 8.93767277e-02,
                                        1.60731375e-01, 2.23776797e-01,
                                        2.79020339e-01, 3.28826623e-01,
                                        3.80494563e-01, 4.68897130e-01,
                                        6.65856788e-01, 5.31631607e-01,
                                        4.99288090e-01, 5.05449319e-01,
                                        5.20244560e-01, 5.40594753e-01,
                                        5.63569247e-01, 5.88596677e-01,
                                        6.15483300e-01, 6.44186129e-01,
                                        6.74730598e-01, 7.07176366e-01])
                elif Av == 1.0:
                   cor_vals = np.array([3.18584754e-04, 4.46883639e-01,
                                        8.03656874e-01, 1.11888399e+00,
                                        1.39510169e+00, 1.64413311e+00,
                                        1.90247281e+00, 2.34448565e+00,
                                        3.32928394e+00, 2.65815804e+00,
                                        2.49644045e+00, 2.52724660e+00,
                                        2.60122280e+00, 2.70297377e+00,
                                        2.81784624e+00, 2.94298338e+00,
                                        3.07741650e+00, 3.22093064e+00,
                                        3.37365299e+00, 3.53588183e+00])
                elif Av == 10.0:
                   cor_vals = np.array([3.18584754e-03, 4.46883639e+00,
                                        8.03656874e+00, 1.11888399e+01,
                                        1.39510169e+01, 1.64413311e+01,
                                        1.90247281e+01, 2.34448565e+01,
                                        3.32928394e+01, 2.65815804e+01,
                                        2.49644045e+01, 2.52724660e+01,
                                        2.60122280e+01, 2.70297377e+01,
                                        2.81784624e+01, 2.94298338e+01,
                                        3.07741650e+01, 3.22093064e+01,
                                        3.37365299e+01, 3.53588183e+01])
             elif slope == 1.0:
                if Av == 0.2:
                   cor_vals = np.array([6.37169507e-05, 1.66703212e-01,
                                        1.95702240e-01, 2.02542884e-01,
                                        2.01679760e-01, 1.99639067e-01,
                                        2.04798805e-01, 2.51948906e-01,
                                        4.12321296e-01, 2.45332925e-01,
                                        1.83073798e-01, 1.61112110e-01,
                                        1.49261697e-01, 1.41968690e-01,
                                        1.36881150e-01, 1.33184714e-01,
                                        1.30474564e-01, 1.28519629e-01,
                                        1.27174162e-01, 1.26339294e-01])
                elif Av == 1.0:
                   cor_vals = np.array([3.18584754e-04, 8.33516058e-01,
                                        9.78511200e-01, 1.01271442e+00,
                                        1.00839880e+00, 9.98195337e-01,
                                        1.02399403e+00, 1.25974453e+00,
                                        2.06160648e+00, 1.22666462e+00,
                                        9.15368990e-01, 8.05560552e-01,
                                        7.46308486e-01, 7.09843450e-01,
                                        6.84405752e-01, 6.65923571e-01,
                                        6.52372822e-01, 6.42598145e-01,
                                        6.35870812e-01, 6.31696468e-01])
                elif Av == 10.0:
                   cor_vals = np.array([3.18584754e-03, 8.33516058e+00,
                                        9.78511200e+00, 1.01271442e+01,
                                        1.00839880e+01, 9.98195337e+00,
                                        1.02399403e+01, 1.25974453e+01,
                                        2.06160648e+01, 1.22666462e+01,
                                        9.15368990e+00, 8.05560552e+00,
                                        7.46308486e+00, 7.09843450e+00,
                                        6.84405752e+00, 6.65923571e+00,
                                        6.52372822e+00, 6.42598145e+00,
                                        6.35870812e+00, 6.31696468e+00])
          elif ampl == 20.0:
             if slope == -1.0:
                if Av == 0.2:
                   cor_vals = np.array([2.54867803e-04, 4.89270645e-02,
                                        1.34550871e-01, 2.52822914e-01,
                                        3.98352927e-01, 5.71279599e-01,
                                        7.91408671e-01, 1.19022193e+00,
                                        2.04837899e+00, 1.60166167e+00,
                                        1.57846540e+00, 1.72279173e+00,
                                        1.91440032e+00, 2.14023985e+00,
                                        2.39035106e+00, 2.66358251e+00,
                                        2.96041688e+00, 3.28206342e+00,
                                        3.63012872e+00, 4.00647982e+00])
                elif Av == 1.0:
                   cor_vals = np.array([1.27433901e-03, 2.44635322e-01,
                                        6.72754356e-01, 1.26411457e+00,
                                        1.99176464e+00, 2.85639800e+00,
                                        3.95704335e+00, 5.95110966e+00,
                                        1.02418949e+01, 8.00830837e+00,
                                        7.89232702e+00, 8.61395865e+00,
                                        9.57200162e+00, 1.07011993e+01,
                                        1.19517553e+01, 1.33179126e+01,
                                        1.48020844e+01, 1.64103171e+01,
                                        1.81506436e+01, 2.00323991e+01])
                elif Av == 10.0:
                   cor_vals = np.array([1.27433901e-02, 2.44635322e+00,
                                        6.72754356e+00, 1.26411457e+01,
                                        1.99176464e+01, 2.85639800e+01,
                                        3.95704335e+01, 5.95110966e+01,
                                        1.02418949e+02, 8.00830837e+01,
                                        7.89232702e+01, 8.61395865e+01,
                                        9.57200162e+01, 1.07011993e+02,
                                        1.19517553e+02, 1.33179126e+02,
                                        1.48020844e+02, 1.64103171e+02,
                                        1.81506436e+02, 2.00323991e+02])
             elif slope == 0.0:
                if Av == 0.2:
                   cor_vals = np.array([2.54867803e-04, 9.03175019e-02,
                                        1.63245766e-01, 2.29342330e-01,
                                        2.90766432e-01, 3.54716956e-01,
                                        4.46761851e-01, 7.02765289e-01,
                                        1.40638943e+00, 7.95038826e-01,
                                        5.97351798e-01, 5.56192961e-01,
                                        5.51697536e-01, 5.62281932e-01,
                                        5.79589106e-01, 6.01008639e-01,
                                        6.25440611e-01, 6.52388113e-01,
                                        6.81627930e-01, 7.13073744e-01])
                elif Av == 1.0:
                   cor_vals = np.array([1.27433901e-03, 4.51587510e-01,
                                        8.16228829e-01, 1.14671165e+00,
                                        1.45383216e+00, 1.77358478e+00,
                                        2.23380926e+00, 3.51382645e+00,
                                        7.03194714e+00, 3.97519413e+00,
                                        2.98675899e+00, 2.78096481e+00,
                                        2.75848768e+00, 2.81140966e+00,
                                        2.89794553e+00, 3.00504320e+00,
                                        3.12720306e+00, 3.26194056e+00,
                                        3.40813965e+00, 3.56536872e+00])
                elif Av == 10.0:
                   cor_vals = np.array([1.27433901e-02, 4.51587510e+00,
                                        8.16228829e+00, 1.14671165e+01,
                                        1.45383216e+01, 1.77358478e+01,
                                        2.23380926e+01, 3.51382645e+01,
                                        7.03194714e+01, 3.97519413e+01,
                                        2.98675899e+01, 2.78096481e+01,
                                        2.75848768e+01, 2.81140966e+01,
                                        2.89794553e+01, 3.00504320e+01,
                                        3.12720306e+01, 3.26194056e+01,
                                        3.40813965e+01, 3.56536872e+01])
             elif slope == 1.0:
                if Av == 0.2:
                   cor_vals = np.array([2.54867803e-04, 1.67643986e-01,
                                        1.98216631e-01, 2.08108416e-01,
                                        2.13425853e-01, 2.25529401e-01,
                                        2.71066093e-01, 4.85817066e-01,
                                        1.15285393e+00, 5.08740144e-01,
                                        2.81137506e-01, 2.11855753e-01,
                                        1.80714673e-01, 1.63655869e-01,
                                        1.52901010e-01, 1.45596677e-01,
                                        1.40431875e-01, 1.36721613e-01,
                                        1.34071495e-01, 1.32236671e-01])
                elif Av == 1.0:
                   cor_vals = np.array([1.27433901e-03, 8.38219929e-01,
                                        9.91083154e-01, 1.04054208e+00,
                                        1.06712926e+00, 1.12764700e+00,
                                        1.35533047e+00, 2.42908533e+00,
                                        5.76426967e+00, 2.54370072e+00,
                                        1.40568753e+00, 1.05927876e+00,
                                        9.03573364e-01, 8.18279346e-01,
                                        7.64505048e-01, 7.27983383e-01,
                                        7.02159377e-01, 6.83608066e-01,
                                        6.70357474e-01, 6.61183357e-01])
                elif Av == 10.0:
                   cor_vals = np.array([1.27433901e-02, 8.38219929e+00,
                                        9.91083154e+00, 1.04054208e+01,
                                        1.06712926e+01, 1.12764700e+01,
                                        1.35533047e+01, 2.42908533e+01,
                                        5.76426967e+01, 2.54370072e+01,
                                        1.40568753e+01, 1.05927876e+01,
                                        9.03573364e+00, 8.18279346e+00,
                                        7.64505048e+00, 7.27983383e+00,
                                        7.02159377e+00, 6.83608066e+00,
                                        6.70357474e+00, 6.61183357e+00])
 

    else:
       cor_vals = np.array([0.0])

    return (x, cor_vals)



@pytest.mark.parametrize("x0", [0.2175])
@pytest.mark.parametrize("gamma", [0.035])
@pytest.mark.parametrize("ampl", [0.0, 5.0, 20])
@pytest.mark.parametrize("slope", [-1.0, 0.0, 1.0])
@pytest.mark.parametrize("Av", [0.2, 1.0, 10.0])
def test_attenuation_Noll09_values(x0, gamma, ampl, slope, Av):
    # get the correct values
    x, cor_vals = get_axav_cor_vals(x0, gamma, ampl, slope, Av)

    # initialize model
    tmodel = Noll09(x0=x0, gamma=gamma, ampl=ampl, slope=slope, Av=Av)

    # test. Needed to decreased atol to 1e-7 because of Av=0.2 case
    np.testing.assert_allclose(tmodel(x), cor_vals[::-1], atol=1e-7)

@pytest.mark.parametrize("x0", [0.2175])
@pytest.mark.parametrize("gamma", [0.035])
@pytest.mark.parametrize("ampl", [0.0, 5.0, 20])
@pytest.mark.parametrize("slope", [-1.0, 0.0, 1.0])
@pytest.mark.parametrize("Av", [0.2, 1.0, 10.0])
def test_attenuation_Noll09_attenuate_values(x0, gamma, ampl, slope, Av):
    # get the correct values
    x, cor_vals = get_axav_cor_vals(x0, gamma, ampl, slope, Av)
    
    # calculate the cor_vals in fractional units
    cor_vals = np.power(10.0, -0.4*(cor_vals))

    # initialize model
    tmodel = Noll09(x0=x0, gamma=gamma, ampl=ampl, slope=slope, Av=Av)

    # test
    np.testing.assert_allclose(tmodel.attenuate(x), cor_vals[::-1], atol=1e-6)
